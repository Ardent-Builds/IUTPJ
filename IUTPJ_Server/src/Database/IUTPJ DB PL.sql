---------------------------IUTPJ database PL/SQL------------------

--------------SCHEMAS----------------------

DROP TABLE CONTEST_PROBLEM_JUNCTION;
DROP TABLE CONTEST_INFO;
DROP TABLE SUBMISSION;
DROP TABLE PROBLEM_SET;
DROP TABLE USER_INFO;
DROP TABLE ADMIN_INFO;

CREATE TABLE ADMIN_INFO(
    ID VARCHAR2(15) PRIMARY KEY,
    USER_NAME VARCHAR2(20) UNIQUE NOT NULL,
    EMAIL VARCHAR2(50) UNIQUE NOT NULL,
    PASSWORD VARCHAR2(16),
    FULL_NAME VARCHAR2(30) NOT NULL,
    INSTITUTION VARCHAR2(30)
);

CREATE TABLE USER_INFO(
    ID VARCHAR2(15) PRIMARY KEY,
    USER_NAME VARCHAR2(20) UNIQUE NOT NULL,
    EMAIL VARCHAR2(50) UNIQUE NOT NULL,
    PASSWORD VARCHAR2(16) NOT NULL,
    FULL_NAME VARCHAR2(30) NOT NULL,
    INSTITUTION VARCHAR2(30)
);

CREATE TABLE PROBLEM_SET(
    ID VARCHAR2(15) PRIMARY KEY,
    PROBLEM_NAME VARCHAR2(50) NOT NULL,
    SETTER_ID VARCHAR2(15) NOT NULL,
    TIME_LIMIT NUMBER(5) NOT NULL,
    MEMORY_LIMIT NUMBER(10) NOT NULL,
    LOCKED VARCHAR2(3) NOT NULL,
    STATEMENT BLOB NOT NULL,
    DATASET_IN BLOB NOT NULL,
    DATASET_OUT BLOB NOT NULL,
    FOREIGN KEY(SETTER_ID) REFERENCES ADMIN_INFO(ID) ON DELETE CASCADE
);

CREATE TABLE SUBMISSION(
    ID VARCHAR2(15) PRIMARY KEY,
    PROBLEM_ID VARCHAR2(15) NOT NULL,
    USER_ID VARCHAR2(15) NOT NULL,
    CODE_LANGUAGE VARCHAR2(15) NOT NULL,
    SUBMISSION_TIME DATE NOT NULL,
    VERDICT VARCHAR2(20) NOT NULL,
    RUNNING_TIME INT NOT NULL,
    CODE_FILE BLOB NOT NULL,
    FOREIGN KEY(PROBLEM_ID) REFERENCES PROBLEM_SET(ID) ON DELETE CASCADE,
    FOREIGN KEY(USER_ID) REFERENCES USER_INFO(ID)
);

CREATE TABLE CONTEST_INFO(
    ID VARCHAR2(15) PRIMARY KEY,
    CONTEST_NAME VARCHAR2(200) NOT NULL,
    START_TIME DATE NOT NULL,
    DURATION_HOURS NUMBER(10) NOT NULL,
    FINISHED VARCHAR2(3) NOT NULL,
    SETTER_ID VARCHAR2(15) NOT NULL,
    FOREIGN KEY(SETTER_ID) REFERENCES ADMIN_INFO(ID) ON DELETE CASCADE
);

CREATE TABLE CONTEST_PROBLEM_JUNCTION(
    CONTEST_ID VARCHAR2(15) NOT NULL,
    PROBLEM_ID VARCHAR2(15) NOT NULL,
    FOREIGN KEY(CONTEST_ID) REFERENCES CONTEST_INFO(ID) ON DELETE CASCADE,
    FOREIGN KEY(PROBLEM_ID) REFERENCES PROBLEM_SET(ID) ON DELETE CASCADE,
    PRIMARY KEY(CONTEST_ID,PROBLEM_ID)
);


------------------------ TRIGGERS -------------------------------
CREATE OR REPLACE TRIGGER UNLOCK_PROBLEM
AFTER UPDATE ON CONTEST_INFO
FOR EACH ROW
WHEN (NEW.FINISHED = 'YES' AND OLD.FINISHED = 'NO')

DECLARE
CURSOR PROBLEMS(C_ID CONTEST_INFO.ID%TYPE) IS SELECT PROBLEM_ID 
FROM CONTEST_PROBLEM_JUNCTION 
WHERE CONTEST_ID = C_ID;
PROBLEM_ID PROBLEM_SET.ID%TYPE;

BEGIN
  OPEN PROBLEMS(:OLD.ID);
  LOOP
    FETCH PROBLEMS INTO PROBLEM_ID;
    EXIT WHEN PROBLEMS%NOTFOUND;
    UPDATE PROBLEM_SET SET LOCKED = 'NO' WHERE PROBLEM_SET.ID = PROBLEM_ID;
  END LOOP;
  CLOSE PROBLEMS;
END;
/




-------------------FUNCTIONS--------------------
CREATE OR REPLACE FUNCTION TABLE_EXIST (TABLE_NAME IN TAB.TNAME%TYPE)       
 RETURN BOOLEAN IS
 QUERY_DATA INT;

BEGIN
  SELECT COUNT(TNAME) INTO QUERY_DATA FROM TAB WHERE TNAME = TABLE_NAME;
  IF QUERY_DATA=0 THEN RETURN FALSE;
  END IF;
  RETURN TRUE;
END TABLE_EXIST;
/




---------------------------CONTEST MANUPULATION FUNCTIONS--------------------
CREATE OR REPLACE FUNCTION INSERT_CONTEST(
    CNAME IN CONTEST_INFO.CONTEST_NAME%TYPE, 
    STIME IN VARCHAR2,
    DRTION IN CONTEST_INFO.DURATION_HOURS%TYPE, 
    SETTER IN CONTEST_INFO.SETTER_ID%TYPE
  )
  RETURN VARCHAR2
AS
  UNIQUE_ID CONTEST_INFO.ID%TYPE;
  CSTIME CONTEST_INFO.START_TIME%TYPE;
BEGIN
  UNIQUE_ID := TO_CHAR(SYSDATE,'DDMMYYYYHH24MISS');
  CSTIME := TO_DATE(STIME, 'DD/MM/YYYY:HH24:MI:SS');

  INSERT INTO CONTEST_INFO VALUES(UNIQUE_ID, CNAME, CSTIME, DRTION, 'NO', SETTER);
  RETURN 'SUCCESS';

  EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN RETURN SQLERRM;
  WHEN OTHERS THEN RETURN SQLERRM;

END;
/

CREATE OR REPLACE FUNCTION UPDATE_CONTEST(
    CID IN CONTEST_INFO.ID%TYPE,
    CNAME IN CONTEST_INFO.CONTEST_NAME%TYPE, 
    STIME IN VARCHAR2,
    DRTION IN CONTEST_INFO.DURATION_HOURS%TYPE,
    FINIS IN CONTEST_INFO.FINISHED%TYPE, 
    SETTER IN CONTEST_INFO.SETTER_ID%TYPE
  )
  RETURN VARCHAR2
AS
  CSTIME DATE;
  ISFINISHED CONTEST_INFO.FINISHED%TYPE;
BEGIN
  CSTIME := TO_DATE(STIME, 'DD/MM/YYYY:HH24:MI:SS');

  SELECT FINISHED INTO ISFINISHED 
  FROM CONTEST_INFO 
  WHERE ID = CID;

  IF ISFINISHED = 'YES' THEN RETURN 'CONTEST FINISHED';
  END IF;

  UPDATE CONTEST_INFO
  SET CONTEST_NAME = CNAME, START_TIME = CSTIME, DURATION_HOURS = DRTION, FINISHED = FINIS
  WHERE ID = CID AND SETTER = SETTER_ID;
  
  RETURN 'SUCCESS';

  EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN RETURN SQLERRM;
  WHEN OTHERS THEN RETURN SQLERRM;

END;
/

CREATE OR REPLACE PROCEDURE DELETE_CONTEST(
  CID IN CONTEST_INFO.ID%TYPE
  )
AS
BEGIN
 DELETE FROM CONTEST_INFO
 WHERE ID = CID;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_PROBLEM_FROM_CONTEST(
  CID IN CONTEST_PROBLEM_JUNCTION.CONTEST_ID%TYPE,
  PID IN CONTEST_PROBLEM_JUNCTION.PROBLEM_ID%TYPE
  )
AS
BEGIN
 DELETE FROM CONTEST_PROBLEM_JUNCTION
 WHERE CONTEST_ID = CID AND PROBLEM_ID = PID;
END;
/

CREATE OR REPLACE FUNCTION ADD_PROBLEM_TO_CONTEST(      
  PROBLEM_ID IN PROBLEM_SET.ID%TYPE, 
  CONTEST_ID IN CONTEST_INFO.ID%TYPE
  ) RETURN VARCHAR2
AS
  CONTEST_FINISHED  CONTEST_INFO.FINISHED%TYPE;
BEGIN
  SELECT FINISHED INTO CONTEST_FINISHED 
  FROM CONTEST_INFO 
  WHERE ID = CONTEST_ID;
  IF CONTEST_FINISHED = 'YES' THEN 
    RETURN 'CONTEST FINISHED';
  END IF;
  INSERT INTO CONTEST_PROBLEM_JUNCTION VALUES(CONTEST_ID, PROBLEM_ID);
  RETURN 'PROBLEM ADDED';
END;
/


-------------------------ADMIN MANUPULATION FUNCTION/PROCESURES--------------
CREATE OR REPLACE FUNCTION INSERT_ADMIN(
  UNAME IN ADMIN_INFO.USER_NAME%TYPE,
  PSWD IN ADMIN_INFO.PASSWORD%TYPE,
  EADDRES IN ADMIN_INFO.EMAIL%TYPE,
  FNAME IN ADMIN_INFO.FULL_NAME%TYPE,
  INST IN ADMIN_INFO.INSTITUTION%TYPE
  )
  RETURN VARCHAR2
AS
  UNIQUE_ID ADMIN_INFO.ID%TYPE;
BEGIN
  UNIQUE_ID := TO_CHAR(SYSDATE,'DDMMYYYYHH24MISS');
  INSERT INTO ADMIN_INFO VALUES(UNIQUE_ID, UNAME, EADDRES, PSWD, FNAME, INST);
  RETURN 'SUCCESS';

  EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN RETURN SQLERRM;
  WHEN OTHERS THEN RETURN SQLERRM;

END;
/

CREATE OR REPLACE FUNCTION UPDATE_ADMIN(
  ADMIN_ID IN ADMIN_INFO.ID%TYPE,
  UNAME IN ADMIN_INFO.USER_NAME%TYPE,
  PSWD IN ADMIN_INFO.PASSWORD%TYPE,
  EADDRES IN ADMIN_INFO.EMAIL%TYPE,
  FNAME IN ADMIN_INFO.FULL_NAME%TYPE,
  INST IN ADMIN_INFO.INSTITUTION%TYPE
  )
  RETURN VARCHAR2
AS
  
BEGIN
  
  UPDATE ADMIN_INFO
  SET USER_NAME = UNAME, EMAIL = EADDRES, PASSWORD = PSWD, FULL_NAME = FNAME, INSTITUTION = INST
  WHERE ID = ADMIN_ID;
  RETURN 'SUCCESS';

  EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN RETURN SQLERRM;
  WHEN OTHERS THEN RETURN SQLERRM;

END;
/


-------------------------USER MANUPULATION FUNCTION/PROCESURES--------------
CREATE OR REPLACE FUNCTION INSERT_USER(
  UNAME IN USER_INFO.USER_NAME%TYPE,
  PSWD IN USER_INFO.PASSWORD%TYPE,
  EADDRES IN USER_INFO.EMAIL%TYPE,
  FNAME IN USER_INFO.FULL_NAME%TYPE,
  INST IN USER_INFO.INSTITUTION%TYPE
  )
  RETURN VARCHAR2
AS
  UNIQUE_ID ADMIN_INFO.ID%TYPE;
BEGIN
  UNIQUE_ID := TO_CHAR(SYSDATE,'DDMMYYYYHH24MISS');
  INSERT INTO USER_INFO VALUES(UNIQUE_ID, UNAME, EADDRES, PSWD, FNAME, INST);
  RETURN 'SUCCESS';

  EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN RETURN SQLERRM;
  WHEN OTHERS THEN RETURN SQLERRM;

END;
/

CREATE OR REPLACE FUNCTION UPDATE_USER(
  USER_ID IN ADMIN_INFO.ID%TYPE,
  UNAME IN ADMIN_INFO.USER_NAME%TYPE,
  PSWD IN ADMIN_INFO.PASSWORD%TYPE,
  EADDRES IN ADMIN_INFO.EMAIL%TYPE,
  FNAME IN ADMIN_INFO.FULL_NAME%TYPE,
  INST IN ADMIN_INFO.INSTITUTION%TYPE
  )
  RETURN VARCHAR2
AS
  
BEGIN
  
  UPDATE USER_INFO
  SET USER_NAME = UNAME, EMAIL = EADDRES, PASSWORD = PSWD, FULL_NAME=FNAME, INSTITUTION = INST
  WHERE ID = USER_ID;
  RETURN 'SUCCESS';

  EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN RETURN SQLERRM;
  WHEN OTHERS THEN RETURN SQLERRM;

END;
/


------------------PROBLEM_SET MANUPULATION-------------

CREATE OR REPLACE FUNCTION INSERT_PROBLEM_SET(
  PNAME IN PROBLEM_SET.PROBLEM_NAME%TYPE,
  SETTER IN PROBLEM_SET.SETTER_ID%TYPE,
  TL IN PROBLEM_SET.TIME_LIMIT%TYPE,
  ML IN PROBLEM_SET.MEMORY_LIMIT%TYPE,
  LKD IN PROBLEM_SET.LOCKED%TYPE,
  STMNT IN PROBLEM_SET.STATEMENT%TYPE,
  DIN IN PROBLEM_SET.DATASET_IN%TYPE,
  DOUT IN PROBLEM_SET.DATASET_OUT%TYPE
  )
  RETURN VARCHAR2
AS
  UNIQUE_ID PROBLEM_SET.ID%TYPE;
BEGIN
  UNIQUE_ID := TO_CHAR(SYSDATE,'DDMMYYYYHH24MISS');
  INSERT INTO PROBLEM_SET VALUES(UNIQUE_ID, PNAME, SETTER, TL, ML, LKD, STMNT, DIN, DOUT);
  RETURN 'SUCCESS';

  EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN RETURN SQLERRM;
  WHEN OTHERS THEN RETURN SQLERRM;

END;
/

CREATE OR REPLACE FUNCTION UPDATE_PROBLEM_SET(
  PROBLEM_ID IN PROBLEM_SET.ID%TYPE,
  PNAME IN PROBLEM_SET.PROBLEM_NAME%TYPE,
  SETTER IN PROBLEM_SET.SETTER_ID%TYPE,
  TL IN PROBLEM_SET.TIME_LIMIT%TYPE,
  ML IN PROBLEM_SET.MEMORY_LIMIT%TYPE,
  LKD IN PROBLEM_SET.LOCKED%TYPE,
  STMNT PROBLEM_SET.STATEMENT%TYPE,
  DIN  PROBLEM_SET.DATASET_IN%TYPE,
  DOUT PROBLEM_SET.DATASET_OUT%TYPE
  )
  RETURN VARCHAR2
AS
  UNIQUE_ID PROBLEM_SET.ID%TYPE;
BEGIN
  UPDATE PROBLEM_SET
  SET PROBLEM_NAME = PNAME, TIME_LIMIT =TL, MEMORY_LIMIT = ML, LOCKED = LKD, STATEMENT = STMNT, DATASET_IN = DIN, DATASET_OUT = DOUT
  WHERE ID = PROBLEM_ID AND SETTER_ID = SETTER;
  RETURN 'SUCCESS';

  EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN RETURN SQLERRM;
  WHEN OTHERS THEN RETURN SQLERRM;

END;
/

CREATE OR REPLACE FUNCTION DELETE_PROBLEM(
  PROBLEM_ID IN PROBLEM_SET.ID%TYPE,
  SETTER IN PROBLEM_SET.SETTER_ID%TYPE
  )
  RETURN VARCHAR2
AS
BEGIN
  DELETE FROM PROBLEM_SET
  WHERE ID = PROBLEM_ID AND SETTER_ID = SETTER;
  RETURN 'SUCCESS';

  EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN RETURN SQLERRM;
  WHEN OTHERS THEN RETURN SQLERRM;

END;
/

------------------SUBMISSION MANUPULATION-------------

CREATE OR REPLACE FUNCTION INSERT_SUBMISSION(
  PID IN PROBLEM_SET.ID%TYPE,
  USID IN USER_INFO.ID%TYPE,
  CL IN SUBMISSION.CODE_LANGUAGE%TYPE,
  VR IN SUBMISSION.VERDICT%TYPE,
  RT IN SUBMISSION.RUNNING_TIME%TYPE,
  CDF IN SUBMISSION.CODE_FILE%TYPE
  )
  RETURN VARCHAR2
AS
  UNIQUE_ID PROBLEM_SET.ID%TYPE;
BEGIN
  UNIQUE_ID := TO_CHAR(SYSDATE,'DDMMYYYYHH24MISS');
  INSERT INTO SUBMISSION VALUES(UNIQUE_ID, PID, USID, CL, TO_DATE(SYSDATE,'DD-MM-YYYY:HH24:MI:SS'), VR, RT, CDF);
  RETURN UNIQUE_ID;

  EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN RETURN SQLERRM;
  WHEN OTHERS THEN RETURN SQLERRM;

END;
/

CREATE OR REPLACE FUNCTION UPDATE_SUBMISSION(
  SID IN SUBMISSION.ID%TYPE,
  VR IN SUBMISSION.VERDICT%TYPE,
  RT IN SUBMISSION.RUNNING_TIME%TYPE
  )
  RETURN VARCHAR2
AS
BEGIN
  
  UPDATE SUBMISSION
  SET VERDICT = VR, RUNNING_TIME = RT
  WHERE ID = SID;
  RETURN 'SUCCESS';

  EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN RETURN SQLERRM;
  WHEN OTHERS THEN RETURN SQLERRM;

END;
/





